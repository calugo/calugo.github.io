<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ipython | Carlos A. Lugo's site]]></title>
  <link href="http://calugo.github.io/blog/categories/ipython/atom.xml" rel="self"/>
  <link href="http://calugo.github.io/"/>
  <updated>2014-11-12T13:13:38+00:00</updated>
  <id>http://calugo.github.io/</id>
  <author>
    <name><![CDATA[Carlos A Lugo VÃ©lez]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Genome Evolution in Host-Pathogen Systems]]></title>
    <link href="http://calugo.github.io/blog/2014/10/14/genome-evolution-in-host-pathogen-systems/"/>
    <updated>2014-10-14T17:54:02+01:00</updated>
    <id>http://calugo.github.io/blog/2014/10/14/genome-evolution-in-host-pathogen-systems</id>
    <content type="html"><![CDATA[<h2 id="finally-the-host-pathogen-entry----more---">Finally the host pathogen entry.! <!-- more --></h2>
<p align="justify">
  This entry is the reason behind setting up the blog. The idea is to build up a mathematical-computational
  model of plant pathogen&#8217;s genome evolution to explore different scenarios such as evolutionary responses to  host jumps.  
  In the following I  will be presenting and discussing every aspect of the  model
  in detail, maths, code, etc. Then  (soon I hope) it will be turned into a manuscript.
  </p>
<p align="justify">
  Perhaps the final version will be published in Nature or Science and the results will grant me a Nobel prize and the blog a Pulitzer,
 or perhaps it might not be the case, however, it is an experiment which will allow me to share with everyone the ideas, techniques and intellectual process involved in carrying out research
  of this nature in <b>real time</b>.</p>

<p align="justify">
    One of the advantages of this format is that I can share not only ideas and calculations but also code!. In fact,
   both <a href="http://github.com">GitHub</a> and <a href="http://octopress.org/">Octopress</a> are mostly used
    for that purpose, so yeah, I will be sharing and describing  code bits and pieces
   where appropiate. The full code (and more&#8230;) to reproduce the results described here are hosted and documented in its own
   <a href="http://calugo.github.io/TSL-PROJECT-A/">repository</a>.
  </p>
<p align="justify">
    For this project I used python, (I did a lot of testing and tinkering in <a href="#ipyth"> <b>IPython</b></a>,
   I strongly advice you to do the same!). The model heavily  relies on the sampling of random variables and because  
   I love and respect the algorithms
   contained in the <a href="#gsl"><b>GNU Scientific Library</b></a> I
   ended up using the <b>pygsl</b>  wrapper, however <a href="http://www.numpy.org/">NumPy</a> and <a href="http://www.scipy.org/">SciPy</a> also contain well documented and functional modules.
  </p>

<p align="justify">
   As expected with this sort of thing it would be really cool if you would like to comment or e-mail me about
    the ideas presented here (<b>computational, biological or mathematical</b>). Having
    said all the above and without further ado, let us
     begin.
 </p>

<h2 id="index">Index</h2>
<ol>
  <li><a href="#Introduction">Introduction</a></li>
  <li><a href="#Model">Model</a>
    <ul>
      <li><a href="#Genes">Model Genes and Genomes</a></li>
      <li><a href="#TU">I. Host Target Units</a></li>
      <li><a href="#EF">II. Pathogen Effector Units</a></li>
      <li><a href="#TE">III. TE and Non-Coding Units</a></li>
      <li><a href="#Evolutionary_Dynamics">Evolutionary Processes</a></li>
    </ul>
  </li>
  <li><a href="#Results">Results</a></li>
  <li><a href="#References">References</a></li>
</ol>

<h2 id="a-idintroductionaintroduction"><a id="Introduction"></a>Introduction</h2>
<p align="justify">
Comparative genomic analysis between elements in clades of plant pathogens exhibit some
striking differences in length and genome architecture, such divergences are mostly localised in genes and
regions of the genome which are in charge of coding the host-pathogen interactions. These domains
present a  high content of  transposable elements embedding sparse genetic units
in charge of establishing the trophic link with the host.  Those regions and genes are the object of this study.
</p>

<p align="justify">
The analysis also suggests that such  domains of <b>non-coding</b> and <b>effector</b> genes
could be the result of processes related to extreme environmental pressures, specifically
 a shift from one host into another (<b>host jump</b>).  
</p>

<p align="justify">
We will restrict to the case in which the set of effector proteins carried by the pathogen
is already successful in invading and tinkering the host&#8217;s biochemistry, and we do
not be considering any co-evolutionary processes.
</p>

<h2 id="a-idmodelamodel"><a id="Model"></a>Model</h2>

<p align="justify">
The genes responsible for the host-pathogen interaction are what we will call here <b>effector genes</b> (EG), we will assume
 that these EGs encode proteins which mediate the biochemical processes which allow the pathogen  to extract resources
  from the host, by establishing links with <b>target units</b> (TU) or proteins within the host.
</p>

<h3 id="a-idgenesamodel-genes-and-genomes"><a id="Genes"></a>Model Genes and Genomes.</h3>

<h3 id="a-idtuai-host-target-sets"><a id="TU"></a>I. Host Target Sets.</h3>

<p align="justify">
We will identify the set of all TUs with a set of integers  $\mathcal{T}=\{1,\dots,K_T\}$ from which
 we can choose a subset to form particular
instances of hosts. For example if $K_T=5000$, then we can form two hosts by forming ordered arrays of
some length $L&lt;K_T$, such as  $h_1=(1,10,100,1000)$ and $h_2=(20,90,835)$.
</p>

<p align="justify">
In python this can be achieved efficiently in a number of different ways. In order to
illustrate this and to introduce the way in which we will use the modules we will be using in the model,
 I will write a function which will return lists of TU labels, by passing to it the length
 of the list $L$, the value $K_T$ and the handler for the random number generators (rk in the code).
 The function looks like:
</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">NEWHOST</span><span class="p">(</span><span class="n">L</span><span class="p">,</span><span class="n">K</span><span class="p">,</span><span class="n">rk</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">hx</span><span class="o">=</span><span class="p">[]</span>
</span><span class='line'>  <span class="n">q</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>  <span class="n">zx</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="n">rk</span><span class="o">.</span><span class="n">uniform_int</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hx</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">zx</span><span class="p">)</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">q</span><span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">L</span><span class="p">:</span>
</span><span class='line'>    <span class="n">mu</span><span class="o">=</span><span class="mi">0</span>
</span><span class='line'>    <span class="n">zx</span><span class="o">=</span><span class="mi">1</span><span class="o">+</span><span class="n">rk</span><span class="o">.</span><span class="n">uniform_int</span><span class="p">(</span><span class="n">K</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">hx</span><span class="p">:</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">j</span><span class="o">==</span><span class="n">zx</span><span class="p">:</span>
</span><span class='line'>        <span class="n">mu</span><span class="o">=</span><span class="mi">1</span>
</span><span class='line'>        <span class="k">break</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">if</span> <span class="n">mu</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
</span><span class='line'>  <span class="n">hx</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">zx</span><span class="p">)</span>
</span><span class='line'>  <span class="n">q</span><span class="o">=</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">hx</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">return</span> <span class="n">hx</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p align="justify">
Before carrying on a word of warning must be said. Python is a very easy
 language to use but It must be  recalled at all times that
the <b>indentation</b> level of the statements matters, if it is
not correct the code will not work. So keep that in mind always.
</p>

<p align="justify">
I called the function &#8220;NEWHOST&#8221;, and store it in a file named
 <b>newhost.py</b>. This and every other
 file related to the model will be stored  in a folder called <b>codes</b>.
 Of particular interest
  will be a file called <b>hpmodel.py</b> which I will use to import every function separately. To
  do so in the case of the hosts functions it must contain the line:
</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">newhost</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>
The setup described so far will allow us to call <b>hpmodel</b> and all the
custom functions we import to it in the same way we use
any other python module. For instance:
</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="c">#INITIALIZATION</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span> <span class="c">#imports the sys module which we use to add a path</span>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="err">â</span><span class="o">../</span><span class="n">codes</span><span class="o">/</span><span class="err">â</span><span class="p">)</span> <span class="c">#adds the path to codes</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pygsl</span> <span class="kn">import</span> <span class="n">rng</span> <span class="k">as</span> <span class="n">rn</span> <span class="c">#the random numbers modules</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">math</span> <span class="kn">as</span> <span class="nn">mth</span><span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hpmodel</span> <span class="kn">as</span> <span class="nn">mda</span> <span class="c">#HERE IS OUR MODULE!</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pickle</span>
</span><span class='line'><span class="c">#Constants and Parameters</span>
</span><span class='line'><span class="n">SEED</span><span class="o">=</span><span class="mi">987654320</span> <span class="c">#The random number generator seed</span>
</span><span class='line'><span class="n">rk</span><span class="o">=</span><span class="n">rn</span><span class="o">.</span><span class="n">rng</span><span class="p">()</span>    <span class="c">#The instance generator</span>
</span><span class='line'><span class="n">rk</span><span class="o">.</span><span class="n">set</span><span class="p">(</span><span class="n">SEED</span><span class="p">)</span>   <span class="c">#</span>
</span><span class='line'><span class="n">LH</span><span class="o">=</span><span class="mi">10</span> <span class="c">#HOST LENGTH</span>
</span><span class='line'><span class="n">Kh</span><span class="o">=</span><span class="mi">500</span> <span class="c"># Host Urn Size</span>
</span><span class='line'><span class="n">Kp</span><span class="o">=</span><span class="mi">100</span> <span class="c"># Pathoghen Urn Size</span>
</span><span class='line'><span class="n">NJMPS</span><span class="o">=</span><span class="mi">10</span> <span class="c">#number of jumps</span>
</span></code></pre></td></tr></table></div></figure></p>

<p align="justify">
These lines import some basic python modules which will be useful later, but also
import the custom <b>hpmodel</b> with the alias mda, then if we execute something like:
</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#Hosts Arrays!!!!&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">ho</span><span class="o">=</span><span class="n">mda</span><span class="o">.</span><span class="n">newhost</span><span class="o">.</span><span class="n">NEWHOST</span><span class="p">(</span><span class="n">LH</span><span class="p">,</span><span class="n">Kh</span><span class="p">,</span><span class="n">rk</span><span class="p">)</span> <span class="c">#Creates a new host&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">HSTa</span><span class="o">=</span><span class="p">{}</span> <span class="c">#UNCORR</span>
</span><span class='line'><span class="n">HSTb</span><span class="o">=</span><span class="p">{}</span> <span class="c">#CORR</span>
</span><span class='line'><span class="n">HSTc</span><span class="o">=</span><span class="p">{}</span> <span class="c">#UNEVENLENGTH</span>
</span><span class='line'><span class="n">HSTa</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ho</span>
</span><span class='line'><span class="n">HSTb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ho</span>
</span><span class='line'><span class="n">HSTc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="n">ho</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">print</span> <span class="n">HSTa</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="n">HSTb</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'><span class="k">print</span> <span class="n">HSTc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">NJMPS</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">j</span>
</span><span class='line'>    <span class="n">HSTa</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">mda</span><span class="o">.</span><span class="n">newhost</span><span class="o">.</span><span class="n">NEWHOST</span><span class="p">(</span><span class="n">LH</span><span class="p">,</span><span class="n">Kh</span><span class="p">,</span><span class="n">rk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">HSTb</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">mda</span><span class="o">.</span><span class="n">newhostcorr</span><span class="o">.</span><span class="n">NEWHOSTCORR</span><span class="p">(</span><span class="n">HSTb</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="n">Kh</span><span class="p">,</span><span class="n">rk</span><span class="p">)</span>
</span><span class='line'>    <span class="n">HSTc</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">=</span><span class="n">mda</span><span class="o">.</span><span class="n">newhostvarl</span><span class="o">.</span><span class="n">NEWHOSTVARL</span><span class="p">(</span><span class="n">LH</span><span class="p">,</span><span class="n">Kh</span><span class="p">,</span><span class="n">rk</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">HSTa</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">HSTb</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">HSTc</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p align="justify">
We will end up with three dictionaries having ten diferent hosts. The one
called HSTa populated with the previously described function. The other
two populated with lists of correlated host (HSTb) and HSTc  populated with lists
of different lenghts (padded with zeroes) respectively. Both
modules also imported from <b>hpmodule</b>. A typical output should like
similar to:
</p>

<p><code>
[89L, 134L, 173L, 187L, 213L, 232L, 260L, 290L, 326L, 386L]
[89L, 134L, 173L, 187L, 213L, 232L, 260L, 290L, 326L, 386L]
[89L, 134L, 173L, 187L, 213L, 232L, 260L, 290L, 326L, 386L]
1
[25L, 31L, 140L, 162L, 172L, 196L, 281L, 328L, 388L, 464L]
[89L, 134L, 173L, 187L, 213L, 232L, 260L, 273L, 290L, 326L]
[7L, 16L, 0, 85L, 206L, 241L, 338L, 419L, 423L, 461L]
2
[42L, 98L, 129L, 184L, 250L, 315L, 333L, 335L, 458L, 481L]
[1L, 89L, 134L, 173L, 187L, 213L, 232L, 260L, 290L, 326L]
[6L, 57L, 135L, 139L, 155L, 248L, 0, 374L, 396L, 403L]
3
[40L, 92L, 168L, 192L, 206L, 249L, 274L, 333L, 354L, 417L]
[1L, 53L, 89L, 134L, 173L, 187L, 232L, 260L, 290L, 326L]
[72L, 0, 0, 0, 0, 338L, 373L, 0, 442L, 0]
4
[25L, 33L, 95L, 115L, 123L, 159L, 336L, 342L, 395L, 432L]
[1L, 53L, 89L, 134L, 173L, 182L, 187L, 232L, 260L, 326L]
[23L, 72L, 0, 0, 0, 103L, 0, 233L, 284L, 309L]
5
[39L, 230L, 253L, 322L, 341L, 386L, 440L, 447L, 471L, 496L]
[1L, 30L, 53L, 89L, 134L, 173L, 182L, 187L, 232L, 326L]
[0, 153L, 155L, 179L, 184L, 0, 325L, 368L, 0, 454L]
6
[63L, 162L, 166L, 271L, 325L, 328L, 331L, 417L, 450L, 464L]
[1L, 30L, 53L, 89L, 134L, 173L, 187L, 232L, 326L, 446L]
[25L, 42L, 52L, 60L, 0, 160L, 0, 334L, 0, 401L]
7
[2L, 55L, 75L, 104L, 115L, 261L, 310L, 422L, 456L, 458L]
[1L, 30L, 53L, 89L, 134L, 173L, 187L, 326L, 377L, 446L]
[136L, 152L, 237L, 272L, 301L, 374L, 391L, 404L, 437L, 0]
8
[16L, 17L, 91L, 195L, 216L, 230L, 297L, 310L, 361L, 449L]
[1L, 53L, 89L, 134L, 173L, 187L, 227L, 326L, 377L, 446L]
[0, 0, 0, 173L, 0, 219L, 334L, 354L, 464L, 0]
9
[34L, 44L, 147L, 192L, 231L, 236L, 320L, 326L, 341L, 346L]
[1L, 53L, 89L, 134L, 173L, 187L, 227L, 377L, 422L, 446L]
[1L, 71L, 103L, 0, 194L, 284L, 299L, 0, 0, 378L]
</code></p>

<p align="justify">
These list of integers will represent the target proteins and processes which
can be accessed by pathogens, once calculated they will remain fixed and it will
be up to the plasticity of the pathogen&#8217;s genome to determine if it can
adapt and invade the host after shifting from a previous one.
</p>

<h3 id="a-idefaii-effector-units"><a id="EF"></a>II. Effector Units.</h3>

<p align="justify">
We will define EGs is by a set of attributes rather than its particular
nucleotide sequence. For instance, we will consider its number of bases (length),
the existence and strength of links between the EG and a particular list of TUs
in a  host, etc. Next we describe every attribute in detail, starting with
the adjacency list of an EG.
</p>

<p><strong>Adjacency lists.</strong></p>

<p align="justify">
The  adjacency set of a particular EG, is
defined as the list of TUs for which the effector is capable of establishing biochemical
 links and gain resources. To construct the adjacency set of a given effector we introduce
  a parameter $c \in (0,1)$ which will allow
  us to assign the initial number of targets a given EG will be able to access out
  of the $K_T$ possible choices available in the  <b>universal</b> set $\mathcal{T}$.
  </p>
<p align="justify">
of resources for the pathogen. To do so we sample numbers $n_i$ from a uniform distributions of
integers between $1$ and $cK_T$, for every EG $i$ present in the pathogen&#8217;s genome.
</p>

<p><strong>Link Weights and Effector Scores.</strong></p>

<h3 id="a-idteaiii-transposable-elements-and-non-coding-units"><a id="TE"></a>III. Transposable Elements and Non-coding Units</h3>

<h2 id="a-idresultsaresults"><a id="Results"></a>Results</h2>

<p align="justify">
</p>

<h2 id="a-idreferencesareferences"><a id="References"></a>References</h2>

<ol>
  <li>
    <p><a name="ipyth"></a><a href="http://ipython.org">Fernando PÃ©rez, Brian E. Granger, IPython: A System for Interactive Scientific Computing,
  Computing in Science and Engineering, vol. 9, no. 3, pp. 21-29, May/June 2007, doi:10.1109/MCSE.2007.53. URL: http://ipython.org</a></p>
  </li>
  <li>
    <p><a name="gsl"></a><a href="http://www.gnu.org/software/gsl/"> M. Galassi et al, GNU Scientific Library Reference Manual (3rd Ed.), ISBN 0954612078.
If you want to give a url, URL: http://www.gnu.org/software/gsl/.</a></p>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Evolution and Genotype-Phenotype Mappings (RNA Networks)]]></title>
    <link href="http://calugo.github.io/blog/2014/10/14/evolution-and-genotype-phenotype-mappings/"/>
    <updated>2014-10-14T16:59:48+01:00</updated>
    <id>http://calugo.github.io/blog/2014/10/14/evolution-and-genotype-phenotype-mappings</id>
    <content type="html"><![CDATA[<h2 id="if-you-want-to-understand-function-study-structure---more---">If you want to understand function, study structure.<!-- more --></h2>

<p align="justify">
The above statement is attributed to F. H. C. Crick and its the opening quote of the excellent
 book on networks
<a href="http://www.oxfordscholarship.com/view/10.1093/acprof:oso/9780199591756.001.0001/acprof-9780199591756">The Structure of Complex Networks</a>
 by E. Estrada. The mathematical theory of evolution as the result of motions in the space of sequences or <b>genotypes</b> is
 and active field of research which involves the use of tools and techniques ranging from the theory of stochastic processes
  to bioinformatics passing through the full family of  <b>&#8216;omics&#8217;</b>.
</p>

<p align="justify">The project I am involved at the minute, is the one of studying the topologies spanned by
the sets of all the possible <b>genotypes</b> or sequences of a given length $l$ which can be form using the four letter
 alphabet $\{A,C,T,G\}$
and calculating their corresponding biochemical function or <b>phenotype</b>. Redundancy will divide the full space of $4^{l}$ into $N$ subsets
$\{\Omega_k\}_{k=1}^N$ each one representing a phenotype. Then, by employing the metric induced by single point mutations the sets $\Omega_k$ can be
<b>connected</b> if they posses sequences which are away from each other a <d>distance</d> $d_h=1$.  
</p>
<p align="justify">
The knowledge of the resultant graph or <b>phenotype landscape</b> allow us to treat the problem of evolution as the problem of
 a walker in a complex network and which can be treated  
 by using the standard tools of statistical physics. This approach relies on a very strong assumption. Namely, the knowledge of
a well defined <b>genotype-phenotype mapping</b>, this is not easy to satisfy for the vast majority of real systems, however for the case of RNA molecules and moderately
 long sequences, the secondary structure can be considered as a very good approximation or proxy for such mapping.
</p>

<p align="justify">
This project is very much work in progress, but because I like to share code and data, I prepared
an Ipython notebook which illustrates the ideas of the previous paragraph (construction the phenotype landscape)
for a very special system: <b>the genetic code</b>. For the case of RNA a nice example is for instance the banner at
 the main page of this site.
</p>

<p align="justify">
In the notebook, it is shown how to generate all the codons, organise them into
 their respective aminoacid class, and how to construct and draw a number neutral networks
diagrams like the one shown below. The entire topology is generated by linking every pair of codons
one mutation away.
</p>

<p>
<a target="_blank" href="http://nbviewer.ipython.org/github/calugo/RNA-NETS/blob/master/NOTEBOOKS/AMINOACIDS.ipynb">
Genetic code&#8217;s notebook and neutral networks (nbviewer)</a>
</p>

<p align="justify">
As stated before the notebook contains code to generate networks like the one below. The image is also a link to the source
code (Github repo).
</p>

<div style="text-align: center;">
<a target="_blank" href="https://github.com/calugo/RNA-NETS"><img src="/images/amino2.png" width="700" target="_blank" /></a>
</div>

<h2 id="webgl-interactive-explorer">WebGL interactive explorer</h2>

<p align="justify">
 The repository also contains the the code of a very robust, but still in a very early stage of development, interactive
 network explorer for the same system. The aim of that visualization tool is non other but to
 been able to quickly render and explore networks and multiplexes with interactive features in real time
 within the browser, applying a precalculated layout (Notice the similarities between the two dimensional and three dimensional
   representations).
 </p>
<p align="justify">
 The latter is also an active project and it is updated often, so make sure check the site
 every now and then to see if there are any improvements.  If there is enough interest
  we  will set up a curated repository. For now its just a lunch time hack
 of the <b>draggable nodes</b> example at <a href="http://threejs.org">three.js</a>
</p>

<p>
Be sure that your browser supports WebGL and that it is enabled (help <a href="http://get.webgl.org/">here</a>).</p>

<p>

 <a target="_blank" href="/jsnet/index.html"><b>THREE.JS-WEBGL INTERACTIVE GENETIC CODE NETWORK EXPLORER HERE</b></a>.  
</p>
]]></content>
  </entry>
  
</feed>
